# vim: set ft=zsh:

# sudo not required for some system commands
for command in mount umount sv pacman updatedb su shutdown poweroff reboot ; do
	alias $command="sudo $command"
done; unset command

# Check if main exists and use instead of master
function git_main_branch() {
  command git rev-parse --git-dir &>/dev/null || return
  local ref
  for ref in refs/{heads,remotes/{origin,upstream}}/{main,trunk,mainline,default}; do
    if command git show-ref -q --verify $ref; then
      echo ${ref:t}
      return
    fi
  done
  echo master
}

# Check for develop and similarly named branches
function git_develop_branch() {
  command git rev-parse --git-dir &>/dev/null || return
  local branch
  for branch in dev devel development; do
    if command git show-ref -q --verify refs/heads/$branch; then
      echo $branch
      return
    fi
  done
  echo develop
}


alias e=$EDITOR
alias zshrc="$EDITOR $ZSH/.zshrc" 

alias ls="eza"
# alias cd="z"
alias src="source ~/.config/zsh/.zshrc"
alias c="bat"

# git aliases
alias g='git'
alias ga='git add'
alias gaa='git add --all'
alias gb='git branch'
alias gba='git branch --all'
alias gbd='git branch --delete'
alias gc='git commit --verbose'
alias gc!='git commit --verbose --amend'
alias gcn!='git commit --verbose --no-edit --amend'
alias gcb='git checkout -b'
alias gcf='git config --list'
alias gcm='git checkout $(git_main_branch)'
alias gcd='git checkout $(git_develop_branch)'
alias gco='git checkout'
alias gd='git diff'
alias gds='git diff --staged'
alias glh='git pull origin $(git rev-parse --abbrev-ref HEAD)'
alias gph="git push origin HEAD"
alias gl='git pull'
alias gp='git push'
alias gst='git status'
alias gfa='git fetch --all --prune'
alias v="$EDITOR"
alias vim="$EDITOR"
alias p="sudo pacman -S"

# Shortenings
alias k="kubectl"
alias tf="tofu"
alias history="history 1"
alias dotf='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'
alias pc="pre-commit"
alias yt="yt-dlp --embed-metadata -i"
alias ytm="yt-dlp --embed-metadata -i -x --audio-format=aac --audio-quality=0"
alias lf="lfub"
alias awseks="aws eks update-kubeconfig --verbose --region us-east-1 --name"

# Navigation
cf() {
	choice="$(find ~/.config -maxdepth 1 | fzf)"
	[ $choice != "" ] && cd $choice && $EDITOR "$choice"
;}

function yy() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

br() {
        result=$(git branch -a --color=always | grep -v '/HEAD\s' | sort |
                fzf --border --ansi --tac --preview-window right:70% \
                        --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h
%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
                sed 's/^..//' | cut -d' ' -f1)
        if [[ $result != "" ]]; then
                if [[ $result == remotes/* ]]; then
                        git checkout --track $(echo $result | sed 's#remotes/##')
                else
                        git checkout "$result"
                fi
        fi
}

branchd() {
        result=$(git branch -a --color=always | grep -v '/HEAD\s' | sort |
                fzf --multi --border --ansi --tac --preview-window right:70% \
                        --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h
%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
                sed 's/^..//' | cut -d' ' -f1)

        # for line in $result; do
        #         branch_arr+=("$line")
        # done
        if [[ $result != "" ]]; then
                if [[ $result == remotes/* ]]; then
                        exit 0
                else
                        git branch -D $(echo "$result"  | tr '\n' ' ')
                fi
        fi
}

proj() {
        result=$(find ~/projects -mindepth 1 -maxdepth 2 -type d | fzf)
        if [[ $result != "" ]]; then
                cd $result
        fi
}
